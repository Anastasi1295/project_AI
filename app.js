const S = {};

function setSpin(v) {
  S.spin.style.display = v ? "inline-flex" : "none";
  S.btnRandom.disabled = v;
  S.btnSent.disabled = v;
  S.btnNouns.disabled = v;
}

function setErr(t) {
  if (!t) {
    S.err.style.display = "none";
    S.err.textContent = "";
    return;
  }
  S.err.style.display = "block";
  S.err.textContent = t;
}

function mapSentIcon(lbl) {
  if (lbl === "positive") return ["üëç", "good", "fa-regular fa-face-smile"];
  if (lbl === "negative") return ["üëé", "bad", "fa-regular fa-face-frown"];
  if (lbl === "neutral") return ["‚ùì", "warn", "fa-regular fa-face-meh"];
  return ["‚ùì", "warn", "fa-regular fa-face-meh"];
}

function mapNounIcon(lbl) {
  if (lbl === "high") return ["üü¢", "good"];
  if (lbl === "medium") return ["üü°", "warn"];
  if (lbl === "low") return ["üî¥", "bad"];
  return ["‚Äî", "warn"];
}

// –ï–¥–∏–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
const FALLBACK_MODEL = "TinyLlama/TinyLlama-1.1B-Chat-v1.0";

function getAuthHeader() {
  const token = S.token?.value.trim();
  return token ? `Bearer ${token.replace(/\s+/g, "")}` : null;
}

// –õ–û–ö–ê–õ–¨–ù–´–ô –ü–û–î–°–ß–Å–¢ –°–£–©–ï–°–¢–í–ò–¢–ï–õ–¨–ù–´–• ‚Äî –¢–û–ß–ù–´–ô –ò –ü–û–õ–ù–´–ô
function countNounsLocally(text) {
  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
  const clean = text
    .replace(/https?:\/\/[^\s]+/g, '')                    // URL
    .replace(/<[^>]+>/g, '')                             // HTML
    .replace(/\b[A-Z]{2,}\d{4,}[A-Z\d]*\b/g, '')         // IDs: B001E5DZTS
    .replace(/[^\w\s.'‚Äô-]/g, ' ')                        // –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
    .replace(/\.{2,}/g, ' ');

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ª–æ–≤
  const words = clean.match(/\b[a-zA-Z][a-zA-Z'\u2019-]*[a-zA-Z]|\b[a-zA-Z]\b/g) || [];

  // –°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
  const commonNouns = new Set([
    'product', 'bottle', 'bottles', 'review', 'water', 'taste', 'flavor', 'flavors',
    'daughter', 'child', 'baby', 'formula', 'goat', 'milk', 'coconut', 'drink',
    'package', 'shipping', 'price', 'value', 'amazon', 'customer', 'service',
    'company', 'brand', 'name', 'website', 'order', 'shipment', 'box', 'can',
    'container', 'label', 'recommendation', 'friend', 'doctor'
  ]);

  let count = 0;

  for (let i = 0; i < words.length; i++) {
    const word = words[i].toLowerCase();

    // –ò—Å–∫–ª—é—á–∞–µ–º –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è, –≥–ª–∞–≥–æ–ª—ã, –Ω–∞—Ä–µ—á–∏—è
    if (['i', 'you', 'he', 'she', 'it', 'we', 'they'].includes(word)) continue;
    if (['my', 'your', 'his', 'her', 'our', 'their'].includes(word)) continue;
    if (['is', 'are', 'was', 'were', 'have', 'has', 'had', 'do', 'does', 'did'].includes(word)) continue;
    if (['very', 'really', 'just', 'only', 'too', 'so', 'not', 'well'].includes(word)) continue;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
    if (commonNouns.has(word)) {
      count++;
      continue;
    }

    // Dr. Oz ‚Üí —Å—á–∏—Ç–∞–µ–º "Dr" –∏ "Oz" –∫–∞–∫ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
    if (word === 'dr' && i + 1 < words.length && /^[A-Z]/.test(words[i+1])) {
      count++; // Dr
      continue;
    }

    // –°–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –Ω–µ –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Üí –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ
    if (/^[A-Z][a-z]+$/.test(words[i]) && i > 0) {
      const prev = words[i - 1];
      const endsWithPunct = ['.', '!', '?'].some(p => prev?.endsWith(p));
      if (!endsWithPunct) {
        count++;
        continue;
      }
    }
  }

  return count;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
function getNounLevel(count) {
  return count > 15 ? "high" :
         count >= 6  ? "medium" :  // 6‚Äì15 ‚Üí medium
                       "low";      // < 6 ‚Üí low
}

// –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ Hugging Face (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
async function callSentimentHF(text) {
  const MODEL = "cardiffnlp/twitter-xlm-roberta-base-sentiment";
  const headers = { "Content-Type": "application/json" };
  const auth = getAuthHeader();
  if (auth) headers["Authorization"] = auth;

  const r = await fetch(`https://api-inference.huggingface.co/models/${MODEL}`, {
    method: "POST",
    headers,
    body: JSON.stringify({ inputs: text })
  });

  if (!r.ok) throw new Error(`API error: ${r.status}`);

  const data = await r.json();
  const best = Array.isArray(data) ? (Array.isArray(data[0]) ? data[0] : data)[0] : null;
  if (!best) throw new Error("No sentiment label");

  const lbl = best.label.toLowerCase();
  if (lbl.includes("pos")) return "positive";
  if (lbl.includes("neg")) return "negative";
  return "neutral";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Analyze Sentiment"
async function onSent() {
  const txt = S.textEl.textContent.trim();
  if (!txt) return setErr("No review selected.");
  setErr(""); setSpin(true);
  try {
    const lbl = await callSentimentHF(txt);
    const [ico, cls, face] = mapSentIcon(lbl);
    S.sent.querySelector("span").textContent = `Sentiment: ${ico}`;
    S.sent.className = `pill ${cls}`;
    S.sent.querySelector("i").className = face;
  } catch (e) {
    setErr("Using fallback sentiment...");
    S.sent.querySelector("span").textContent = "Sentiment: ‚ùì";
    S.sent.className = "pill warn";
    S.sent.querySelector("i").className = "fa-regular fa-face-meh";
  } finally {
    setSpin(false);
  }
}

// –ü–æ–¥—Å—á—ë—Ç —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö 
async function onNouns() {
  const txt = S.textEl.textContent.trim();
  if (!txt) return setErr("No review selected.");
  setErr(""); setSpin(true);

  // –¢–û–ß–ù–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô –ü–û–î–°–ß–Å–¢
  const count = countNounsLocally(txt);
  const level = getNounLevel(count);  // –ó–¥–µ—Å—å 6 —Ç–æ—á–Ω–æ –¥–∞—ë—Ç medium

  const [ico, cls] = mapNounIcon(level);
  S.nouns.querySelector("span").textContent = `Noun level: ${ico} (${count})`;
  S.nouns.className = `pill ${cls}`;
  S.nouns.title = `Counted ${count} nouns`;

  setSpin(false);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ TSV –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏
async function rand() {
  setSpin(true);
  setErr("");

  if (!S.reviews) {
    try {
      S.reviews = await loadTSV();
    } catch (e) {
      setErr("Failed to load reviews: " + e.message);
      setSpin(false);
      return;
    }
  }

  const idx = Math.floor(Math.random() * S.reviews.length);
  S.textEl.textContent = S.reviews[idx].text || "(no text)";

  // –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  S.sent.querySelector("span").textContent = "Sentiment: ‚Äî";
  S.sent.className = "pill";
  S.sent.querySelector("i").className = "fa-regular fa-face-meh";

  S.nouns.querySelector("span").textContent = "Noun level: ‚Äî";
  S.nouns.className = "pill";

  setSpin(false);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ TSV
function loadTSV() {
  return new Promise((resolve, reject) => {
    Papa.parse("./reviews_test.tsv", {
      download: true,
      delimiter: "\t",
      header: true,
      skipEmptyLines: true,
      complete: r => {
        const rows = (r.data || []).filter(x => x?.text);
        resolve(rows.length ? rows : reject(new Error("No valid reviews")));
      },
      error: reject
    });
  });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
function init() {
  S.textEl = document.getElementById("text");
  S.err = document.getElementById("err");
  S.spin = document.getElementById("spin");
  S.btnRandom = document.getElementById("btnRandom");
  S.btnSent = document.getElementById("btnSent");
  S.btnNouns = document.getElementById("btnNouns");
  S.token = document.getElementById("token") || document.getElementById("tokenInput");
  S.sent = document.getElementById("sent");
  S.nouns = document.getElementById("nouns");

  S.btnRandom.addEventListener("click", rand);
  S.btnSent.addEventListener("click", onSent);
  S.btnNouns.addEventListener("click", onNouns);

  S.reviews = null;
  S.textEl.textContent = "Click 'Select Random Review' to load a review.";
}

if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", init);
} else {
  init();
}
