// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
const S = {};

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∫–Ω–æ–ø–æ–∫
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä –∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ v = true
function setSpin(v) {
  S.spin.style.display = v ? "inline-flex" : "none";
  S.btnRandom.disabled = v;
  S.btnSent.disabled = v;
  S.btnNouns.disabled = v;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö
// –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—É—Å—Ç–æ–π ‚Äî —Å–∫—Ä—ã–≤–∞–µ—Ç –±–ª–æ–∫, –∏–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç
function setErr(t) {
  if (!t) {
    S.err.style.display = "none";
    S.err.textContent = "";
    return;
  }
  S.err.style.display = "block";
  S.err.textContent = t;
}

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ —ç–º–æ–¥–∑–∏, —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å –∏ –∏–∫–æ–Ω–∫—É Font Awesome
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤: [—ç–º–æ–¥–∑–∏, CSS-–∫–ª–∞—Å—Å, –∏–∫–æ–Ω–∫–∞]
function mapSentIcon(lbl) {
  if (lbl === "positive") return ["üëç", "good", "fa-regular fa-face-smile"];
  if (lbl === "negative") return ["üëé", "bad", "fa-regular fa-face-frown"];
  if (lbl === "neutral") return ["‚ùì", "warn", "fa-regular fa-face-meh"];
  return ["‚ùì", "warn", "fa-regular fa-face-meh"];
}

// –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö
function mapNounIcon(lbl) {
  if (lbl === "high" || lbl === "many") return ["üü¢", "good"];
  if (lbl === "medium") return ["üü°", "warn"];
  if (lbl === "low" || lbl === "few") return ["üî¥", "bad"];
  return ["‚Äî", "warn"];
}

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–µ–π
function firstLineLower(t) {
  return (t || "").split(/\r?\n/)[0].toLowerCase().trim();
}

// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: positive / negative / neutral
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –æ–ø–µ—á–∞—Ç–∫–∏
function normalizeResp(raw) {
  let s = firstLineLower(raw).replace(/^[^a-z–∞-—è—ë]+/i, "");
  if (/positive|positif|–ø–æ–ª–æ–∂–∏—Ç|—Ö–æ—Ä–æ—à|good/.test(s)) return "positive";
  if (/negative|negatif|–æ—Ç—Ä–∏—Ü–∞—Ç|–ø–ª–æ—Ö|bad/.test(s)) return "negative";
  if (/neutral|–Ω–µ–π—Ç—Ä/.test(s)) return "neutral";
  return s; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
}

// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö: high / medium / low
// –£—á–∏—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ —Ä—É—Å—Å–∫–æ–º
function normalizeLevel(raw) {
  let s = firstLineLower(raw);
  if (/\b(high|many|>?\s*15|\bmore than 15\b|–±–æ–ª–µ–µ\s*15|–º–Ω–æ–≥–æ)\b/.test(s)) return "high";
  if (/\b(medium|6-15|6 to 15|—Å—Ä–µ–¥–Ω|–æ—Ç\s*6\s*–¥–æ\s*15)\b/.test(s)) return "medium";
  if (/\b(low|few|<\s*6|–º–∞–ª–æ|–º–µ–Ω–µ–µ\s*6)\b/.test(s)) return "low";
  return s;
}

// –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)
const TEXTGEN_MODELS = [
  "HuggingFaceH4/smol-llama-3.2-1.7B-instruct",
  "TinyLlama/TinyLlama-1.1B-Chat-v1.0"
];

// –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤ (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è)
const SENTIMENT_MODEL = "cardiffnlp/twitter-xlm-roberta-base-sentiment";

// –ú–æ–¥–µ–ª–∏ –¥–ª—è POS-—Ç–µ–≥–≥–∏–Ω–≥–∞ (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π —Ä–µ—á–∏, –≤–∫–ª—é—á–∞—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ)
const POS_MODELS = [
  "vblagoje/bert-english-uncased-finetuned-pos",
  "vblagoje/bert-english-cased-finetuned-pos"
];

// –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ title —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
let ACTIVE_TEXTGEN_MODEL = TEXTGEN_MODELS[0];
let ACTIVE_SENT_MODEL = SENTIMENT_MODEL;
let ACTIVE_POS_MODEL = POS_MODELS[0];

// –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∫–∞–∑–∞–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
// –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
function getAuthHeader() {
  const el = S.token;
  const tok = el && el.value ? el.value.trim().replace(/[\s\r\n\t]+/g, "") : "";
  return tok ? ("Bearer " + tok) : null;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Hugging Face Inference API
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏: 401, 402, 429, 404 –∏ –ø—Ä–æ—á–∏–µ
async function hfRequest(modelId, body) {
  const url = `https://api-inference.huggingface.co/models/${modelId}`;
  const headers = {
    "Accept": "application/json",
    "Content-Type": "application/json"
  };
  const auth = getAuthHeader();
  if (auth) headers["Authorization"] = auth;

  const r = await fetch(url, {
    method: "POST",
    mode: "cors",
    cache: "no-store",
    headers,
    body: JSON.stringify(body)
  });

  if (r.status === 401) throw new Error("401 Unauthorized (—É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π HF —Ç–æ–∫–µ–Ω hf_‚Ä¶ —Å –ø—Ä–∞–≤–æ–º Read)");
  if (r.status === 402) throw new Error("402 Payment required");
  if (r.status === 429) throw new Error("429 Rate limited");
  if (r.status === 404 || r.status === 403) throw new Error(`Model ${modelId} unavailable (${r.status})`);
  if (!r.ok) {
    const e = await r.text();
    throw new Error(`API error ${r.status}: ${e.slice(0, 200)}`);
  }
  return r.json();
}

// –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å,
// –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî —Ä–µ–∑–µ—Ä–≤–Ω–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π
async function callSentimentHF(text) {
  const data = await hfRequest(SENTIMENT_MODEL, {
    inputs: text,
    options: { wait_for_model: true, use_cache: false }
  });
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–≤–æ–∑–º–æ–∂–Ω—ã —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
  const arr = Array.isArray(data) && Array.isArray(data[0]) ? data[0] : (Array.isArray(data) ? data : []);
  // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º score
  let best = arr.reduce((a, b) => (a && a.score > b.score) ? a : b, null) || arr[0];
  if (!best) throw new Error("Empty response from sentiment model");
  const lbl = best.label.toLowerCase();
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Ç–∫—É –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
  if (/pos/.test(lbl)) return "positive";
  if (/neu/.test(lbl)) return "neutral";
  if (/neg/.test(lbl)) return "negative";
  // –†–µ–∑–µ—Ä–≤: –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
  return await callTextGenHF(
    "Classify this review as positive, negative, or neutral. Return only one word.",
    text
  ).then(normalizeResp);
}

// –ü–æ–¥—Å—á—ë—Ç —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —á–µ—Ä–µ–∑ POS-—Ç–µ–≥–≥–∏–Ω–≥
// –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—É—é
async function callNounsPOSHF(text) {
  let lastErr = null;
  for (const m of POS_MODELS) {
    try {
      const data = await hfRequest(m, {
        inputs: text,
        options: { wait_for_model: true, use_cache: false }
      });
      const flat = Array.isArray(data) && Array.isArray(data[0]) ? data[0] : (Array.isArray(data) ? data : []);
      if (!flat.length) throw new Error("Empty POS response");
      let count = 0;
      // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ NOUN –∏ PROPN (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞)
      for (const tok of flat) {
        const tag = (tok.entity_group || tok.entity || "").toUpperCase();
        if (tag.includes("NOUN") || tag.includes("PROPN") || ["NN", "NNS", "NNP", "NNPS"].includes(tag)) {
          count++;
        }
      }
      ACTIVE_POS_MODEL = m; // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
      return count > 15 ? "high" : count >= 6 ? "medium" : "low";
    } catch (e) {
      lastErr = e;
    }
  }
  // –†–µ–∑–µ—Ä–≤: –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
  const out = await callTextGenHF(
    "Count the nouns in this review and return only High (>15), Medium (6-15), or Low (<6). Return only one of: High, Medium, Low.",
    text
  );
  return normalizeLevel(out);
}

// –í—ã–∑–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—É—Ç—å)
// –ü–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–æ–¥–µ–ª–∏, –ø–æ–∫–∞ –æ–¥–Ω–∞ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
async function callTextGenHF(prompt, text) {
  let lastErr = null;
  for (const m of TEXTGEN_MODELS) {
    try {
      const data = await hfRequest(m, {
        inputs: `${prompt}\n\nTEXT:\n${text}\n\nANSWER:`,
        parameters: { max_new_tokens: 32, temperature: 0, return_full_text: false },
        options: { wait_for_model: true, use_cache: false }
      });
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
      const txt = Array.isArray(data) && data[0]?.generated_text
        ? data[0].generated_text
        : (data?.generated_text ?? (typeof data === "string" ? data : JSON.stringify(data)));
      ACTIVE_TEXTGEN_MODEL = m;
      return txt;
    } catch (e) {
      lastErr = e;
    }
  }
  throw lastErr || new Error("All text-generation models unavailable");
}

// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
function rand() {
  if (!S.reviews.length) { setErr("No reviews loaded."); return; }
  const i = Math.floor(Math.random() * S.reviews.length);
  S.textEl.textContent = S.reviews[i].text || "";
  // –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
  S.sent.querySelector("span").textContent = "Sentiment: ‚Äî";
  S.sent.className = "pill";
  S.sent.querySelector("i").className = "fa-regular fa-face-meh";
  S.nouns.querySelector("span").textContent = "Noun level: ‚Äî";
  S.nouns.className = "pill";
  setErr("");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Analyze Sentiment"
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥, –≤—ã–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑, –æ–±–Ω–æ–≤–ª—è–µ—Ç UI
async function onSent() {
  const txt = S.textEl.textContent.trim();
  if (!txt) { setErr("Select a review first."); return; }
  setErr(""); setSpin(true);
  try {
    const lbl = await callSentimentHF(txt);
    const [ico, cls, face] = mapSentIcon(lbl);
    S.sent.querySelector("span").textContent = "Sentiment: " + ico;
    S.sent.className = "pill " + cls;
    S.sent.querySelector("i").className = face;
    S.sent.title = `model: ${ACTIVE_SENT_MODEL || ACTIVE_TEXTGEN_MODEL}`;
  } catch (e) {
    setErr(e.message);
  } finally {
    setSpin(false);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Count Nouns"
// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥, –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å—á—ë—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç UI
async function onNouns() {
  const txt = S.textEl.textContent.trim();
  if (!txt) { setErr("Select a review first."); return; }
  setErr(""); setSpin(true);
  try {
    const lvl = await callNounsPOSHF(txt);
    const [ico, cls] = mapNounIcon(lvl);
    S.nouns.querySelector("span").textContent = "Noun level: " + ico;
    S.nouns.className = "pill " + cls;
    S.nouns.title = `model: ${ACTIVE_POS_MODEL || ACTIVE_TEXTGEN_MODEL}`;
  } catch (e) {
    setErr(e.message);
  } finally {
    setSpin(false);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ TSV-—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é Papa Parse
function fetchTSV(url) {
  return new Promise((res, rej) => {
    if (typeof Papa === "undefined") { rej(new Error("Papa Parse not loaded")); return; }
    Papa.parse(url, {
      download: true,
      delimiter: "\t",
      header: true,
      skipEmptyLines: true,
      complete: r => {
        const rows = (r.data || []).filter(x => x && x.text); // —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–∫—Å—Ç–∞
        res(rows);
      },
      error: e => rej(e)
    });
  });
}

// –ü–æ–∏—Å–∫ TSV-—Ñ–∞–π–ª–∞ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—É—Ç—è–º
// –ü–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–∏ –Ω–∞ GitHub Pages —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤
async function loadTSV() {
  const candidates = ["./reviews_test.tsv", "./reviews_test (1).tsv", "./reviews_test%20(1).tsv"];
  for (const c of candidates) {
    try {
      const rows = await fetchTSV(c);
      if (rows.length) return rows;
    } catch (_) { }
  }
  throw new Error("TSV not found");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –ø—Ä–∏–≤—è–∑–∫–∞ DOM, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function init() {
  S.reviews = [];
  S.textEl = document.getElementById("text");
  S.err = document.getElementById("err");
  S.spin = document.getElementById("spin");
  S.btnRandom = document.getElementById("btnRandom");
  S.btnSent = document.getElementById("btnSent");
  S.btnNouns = document.getElementById("btnNouns");
  S.token = document.getElementById("token") || document.getElementById("tokenInput");
  S.sent = document.getElementById("sent");
  S.nouns = document.getElementById("nouns");

  S.btnRandom.addEventListener("click", rand);
  S.btnSent.addEventListener("click", onSent);
  S.btnNouns.addEventListener("click", onNouns);

  // –ó–∞–≥—Ä—É–∑–∫–∞ TSV –∏ –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–∑—ã–≤–∞
  (async () => {
    try {
      S.reviews = await loadTSV();
      rand();
    } catch (e) {
      setErr("Failed to load TSV: " + e.message);
    }
  })();
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", init);
} else {
  init();
}
